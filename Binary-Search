class BinSearch():
	def search_any(self,arr,target):
		l = 0
		r = len(arr)-1
		while True:
			mid = (l+r)//2
			if r < l:
				return(-1)
			elif arr[mid] < target:
				l = mid+1
			elif arr[mid] > target:
				r = mid-1
			else:
				return(mid)

	def search_all(self,arr,target):
		l = 0
		r = len(arr)-1
		while True:
			mid = (l+r)//2
			if r < l:
				return(tuple([-1]))
			elif arr[mid] < target:
				l = mid+1
			elif arr[mid] > target:
				r = mid-1
			else:
				l_sol,r_sol=mid,mid
				while l_sol-1 > 0 and arr[l_sol-1] == target:
					l_sol-=1
				while r_sol+1 < len(arr) and arr[r_sol+1] == target:
					r_sol+=1
				return(tuple(range(l_sol,r_sol+1)))

driver = BinSearch()
print('\n')

print('1')
print('**',driver.search_any([1,2,3,4,5,6,7,8,9,10],4))
print('-- 3')

print('2')
print('**',driver.search_any([1,2,3,4,5,7,8,9,10],6))
print('-- -1')

print('3')
print('**',driver.search_all([1,2,3,3,3,3,3,3,4,6,7,8,8,8],3))
print('-- (2, 3, 4, 5, 6, 7)')

print('4')
print('**',driver.search_all([1,2,3,3,3,3,3,3,4,6,7,8,8,8],5))
print('-- (-1,)')